[{"name":"app.R","content":"library(shiny)\r\nlibrary(sf)\r\nlibrary(tidygeocoder)\r\nlibrary(dplyr)\r\nlibrary(leaflet)\r\nlibrary(httr)\r\nlibrary(jsonlite)\r\n\r\n# Function to fetch data from ArcGIS REST service\r\nfetch_feature_service <- function(service_url, where_clause = \"1=1\") {\r\n  tryCatch({\r\n    query_url <- paste0(service_url, \"/query\")\r\n    response <- GET(query_url, query = list(\r\n      where = where_clause,\r\n      outFields = \"*\",\r\n      f = \"geojson\",\r\n      outSR = \"4326\"\r\n    ))\r\n    \r\n    if (status_code(response) == 200) {\r\n      geojson_text <- content(response, as = \"text\", encoding = \"UTF-8\")\r\n      sf_data <- st_read(geojson_text, quiet = TRUE)\r\n      return(sf_data)\r\n    } else {\r\n      return(NULL)\r\n    }\r\n  }, error = function(e) {\r\n    return(NULL)\r\n  })\r\n}\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"New York Metro Township Finder\"),\r\n  \r\n  # Add custom CSS for better styling\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }\r\n      .main-container { max-width: 1200px; margin: 0 auto; }\r\n      .sidebar { background-color: #f8f9fa; padding: 20px; border-radius: 8px; }\r\n      .results-panel { margin-top: 20px; }\r\n      .btn-primary { \r\n        margin-top: 15px; \r\n        width: 100%; \r\n        background-color: #0066cc;\r\n        border-color: #0066cc;\r\n        font-weight: 500;\r\n      }\r\n      .btn-primary:hover {\r\n        background-color: #0052a3;\r\n        border-color: #0052a3;\r\n      }\r\n      .result-item { \r\n        font-size: 15px; \r\n        margin: 8px 0; \r\n        padding: 12px;\r\n        background-color: #f8f9fa;\r\n        border-left: 4px solid #0066cc;\r\n        border-radius: 4px;\r\n        min-height: 20px;\r\n      }\r\n      .result-item.placeholder {\r\n        background-color: #f1f3f4;\r\n        border-left-color: #6c757d;\r\n        color: #6c757d;\r\n        font-style: italic;\r\n      }\r\n      .status-text {\r\n        font-size: 13px;\r\n        color: #6c757d;\r\n        font-style: italic;\r\n      }\r\n      .form-control {\r\n        border-radius: 4px;\r\n        border: 1px solid #ced4da;\r\n      }\r\n      .form-control:focus {\r\n        border-color: #0066cc;\r\n        box-shadow: 0 0 0 0.2rem rgba(0, 102, 204, 0.25);\r\n      }\r\n      .title-panel h1 {\r\n        color: #0066cc;\r\n        font-weight: 300;\r\n        margin-bottom: 30px;\r\n      }\r\n      .info-text {\r\n        background-color: #e7f3ff;\r\n        border: 1px solid #bee5eb;\r\n        border-radius: 4px;\r\n        padding: 10px;\r\n        margin-top: 20px;\r\n        font-size: 13px;\r\n        color: #055160;\r\n      }\r\n    \")),\r\n    \r\n    # JavaScript to update result styling\r\n    tags$script(HTML(\"\r\n      $(document).on('shiny:value', function(event) {\r\n        if (event.name === 'matched_address') {\r\n          var addressDiv = $('#address-result');\r\n          var townshipDiv = $('#township-result');\r\n          var countyDiv = $('#county-result');\r\n          \r\n          if (event.value && event.value.includes('📍')) {\r\n            // Real result - remove placeholder styling\r\n            addressDiv.removeClass('placeholder');\r\n            townshipDiv.show();\r\n            countyDiv.show();\r\n          } else {\r\n            // Placeholder or empty - add placeholder styling\r\n            addressDiv.addClass('placeholder');\r\n            if (!event.value || event.value === '') {\r\n              townshipDiv.hide();\r\n              countyDiv.hide();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    \"))\r\n  ),\r\n  \r\n  div(class = \"main-container\",\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          class = \"sidebar\",\r\n          width = 4,\r\n          h4(\"Enter Address\", style = \"margin-top: 0; color: #0066cc;\"),\r\n          textInput(\"street\", \"Street Address\", \r\n                    placeholder = \"123 Main Street\",\r\n                    value = \"\"),\r\n          textInput(\"city\", \"City (New York only)\", \r\n                    placeholder = \"Hempstead\",\r\n                    value = \"\"),\r\n          actionButton(\"submit\", \"🔍 Find Township & County\", \r\n                       class = \"btn-primary\"),\r\n          br(),\r\n          div(class = \"status-text\",\r\n              textOutput(\"loading_status\")\r\n          ),\r\n          \r\n          div(class = \"info-text\",\r\n              strong(\"Coverage Area:\"), br(),\r\n              \"Long Island, NYC, and Westchester County\", br(), br(),\r\n              strong(\"Supported Counties:\"), br(),\r\n              \"Nassau, Suffolk, Queens, Kings (Brooklyn), New York (Manhattan), Richmond (Staten Island), Bronx, Westchester\"\r\n          )\r\n        ),\r\n        \r\n        mainPanel(\r\n          width = 8,\r\n          div(class = \"results-panel\",\r\n              h4(\"Results\", style = \"color: #0066cc; margin-bottom: 20px;\"),\r\n              \r\n              # Results display\r\n              div(id = \"results-container\",\r\n                  div(id = \"address-result\", class = \"result-item placeholder\", textOutput(\"matched_address\")),\r\n                  div(id = \"township-result\", class = \"result-item\", style = \"display: none;\", textOutput(\"township\")),\r\n                  div(id = \"county-result\", class = \"result-item\", style = \"display: none;\", textOutput(\"county\"))\r\n              ),\r\n              \r\n              br(),\r\n              \r\n              # Map\r\n              leafletOutput(\"map\", height = \"500px\"),\r\n              \r\n              # Footer info\r\n              div(class = \"info-text\", style = \"margin-top: 20px;\",\r\n                  p(strong(\"How it works:\"), \"Enter a street address and city, and this app will use the US Census Bureau's geocoding service to find the exact coordinates. It then determines which township/municipality and county the address falls within using official New York State boundary data.\"),\r\n                  p(strong(\"Note:\"), \"Accuracy depends on the quality of the address entered and the geocoding service. For best results, use complete street addresses.\")\r\n              )\r\n          )\r\n        )\r\n      )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  values <- reactiveValues(\r\n    township_shapes = NULL,\r\n    county_shapes = NULL,\r\n    data_loaded = FALSE,\r\n    data_loading_started = FALSE\r\n  )\r\n  \r\n  # Status display\r\n  output$loading_status <- renderText({\r\n    if (!values$data_loading_started) {\r\n      \"Ready to load geographic data...\"\r\n    } else if (!values$data_loaded) {\r\n      \"Loading boundary data... This may take a moment.\"\r\n    } else {\r\n      township_count <- ifelse(is.null(values$township_shapes), 0, nrow(values$township_shapes))\r\n      county_count <- ifelse(is.null(values$county_shapes), 0, nrow(values$county_shapes))\r\n      paste(\"✓ Ready! Loaded\", county_count, \"counties and\", township_count, \"municipalities.\")\r\n    }\r\n  })\r\n  \r\n  # Initialize outputs with helpful placeholder text\r\n  output$matched_address <- renderText(\"Enter an address above to get started\")\r\n  output$township <- renderText(\"\")\r\n  output$county <- renderText(\"\")\r\n  \r\n  # Load feature service data when app starts\r\n  observeEvent(once = TRUE, ignoreNULL = FALSE, ignoreInit = FALSE, {\r\n    TRUE\r\n  }, {\r\n    if (!values$data_loading_started) {\r\n      values$data_loading_started <- TRUE\r\n      \r\n      # Service URLs - NY State GIS services\r\n      township_service_url <- \"https://services6.arcgis.com/EbVsqZ18sv1kVJ3k/arcgis/rest/services/NYS_Civil_Boundaries/FeatureServer/6\"\r\n      county_service_url <- \"https://services6.arcgis.com/EbVsqZ18sv1kVJ3k/arcgis/rest/services/NYS_Civil_Boundaries/FeatureServer/2\"\r\n      \r\n      # Target counties for municipal boundaries\r\n      target_counties <- c(\"Suffolk\", \"Nassau\", \"Queens\", \"Kings\", \"New York\", \"Richmond\", \"Bronx\", \"Westchester\")\r\n      \r\n      # Create WHERE clause for townships with LIKE operators for partial matches\r\n      county_conditions <- paste0(\"COUNTY LIKE '%\", target_counties, \"%'\")\r\n      township_where <- paste(county_conditions, collapse = \" OR \")\r\n      \r\n      # Fetch data\r\n      township_data <- fetch_feature_service(township_service_url, township_where)\r\n      county_data <- fetch_feature_service(county_service_url)  # All NY counties\r\n      \r\n      # Store data\r\n      if (!is.null(county_data)) {\r\n        values$county_shapes <- county_data\r\n      }\r\n      \r\n      if (!is.null(township_data)) {\r\n        values$township_shapes <- township_data\r\n      }\r\n      \r\n      values$data_loaded <- TRUE\r\n    }\r\n  })\r\n  \r\n  # Handle address submission\r\n  observeEvent(input$submit, {\r\n    # Clean and validate inputs\r\n    street_clean <- trimws(input$street)\r\n    city_raw <- trimws(input$city)\r\n    \r\n    # Handle \"City, State\" format - strip everything after comma\r\n    city_clean <- if (grepl(\",\", city_raw)) {\r\n      trimws(strsplit(city_raw, \",\")[[1]][1])\r\n    } else {\r\n      city_raw\r\n    }\r\n    \r\n    if (street_clean == \"\" || city_clean == \"\") {\r\n      showNotification(\"Please enter both street address and city.\", type = \"warning\", duration = 3)\r\n      return()\r\n    }\r\n    \r\n    if (!values$data_loaded) {\r\n      showNotification(\"Geographic data still loading. Please wait a moment.\", type = \"warning\", duration = 3)\r\n      return()\r\n    }\r\n    \r\n    if (is.null(values$township_shapes) || is.null(values$county_shapes)) {\r\n      showNotification(\"Geographic data not available. Please refresh the page and try again.\", type = \"error\")\r\n      return()\r\n    }\r\n    \r\n    # Show loading notification\r\n    loading_id <- showNotification(\"Geocoding address...\", type = \"message\", duration = NULL)\r\n    \r\n    # Construct the full address using cleaned city\r\n    full_address <- paste(street_clean, city_clean, \"NY\")\r\n    \r\n    # Geocode the address\r\n    geo_result <- tryCatch({\r\n      geo(full_address, method = \"census\", full_results = TRUE)\r\n    }, error = function(e) {\r\n      removeNotification(loading_id)\r\n      showNotification(\"Geocoding failed. Please check your address and try again.\", type = \"error\")\r\n      return(NULL)\r\n    })\r\n    \r\n    removeNotification(loading_id)\r\n    \r\n    if (is.null(geo_result) || nrow(geo_result) == 0) {\r\n      output$matched_address <- renderText(\"❌ Address not found. Please verify the address and try again.\")\r\n      output$township <- renderText(\"\")\r\n      output$county <- renderText(\"\")\r\n      \r\n      # Clear map\r\n      output$map <- renderLeaflet({\r\n        leaflet() %>% addTiles()\r\n      })\r\n      return()\r\n    }\r\n    \r\n    # Extract coordinates\r\n    lat <- geo_result$lat\r\n    lon <- geo_result$long\r\n    matched_address <- geo_result$matchedAddress\r\n    \r\n    # Create point geometry\r\n    point <- st_sf(geometry = st_sfc(st_point(c(lon, lat)), crs = 4326))\r\n    \r\n    # Perform spatial joins\r\n    township_result <- tryCatch({\r\n      st_join(point, values$township_shapes, join = st_within)\r\n    }, error = function(e) NULL)\r\n    \r\n    county_result <- tryCatch({\r\n      st_join(point, values$county_shapes, join = st_within)\r\n    }, error = function(e) NULL)\r\n    \r\n    # Extract municipality name\r\n    township_name <- if (!is.null(township_result) && nrow(township_result) > 0) {\r\n      name_cols <- c(\"NAME\", \"Name\", \"MUNI_NAME\", \"TOWN_NAME\", \"CITY_NAME\")\r\n      available_cols <- intersect(name_cols, names(township_result))\r\n      if (length(available_cols) > 0 && !is.na(township_result[[available_cols[1]]][1])) {\r\n        township_result[[available_cols[1]]][1]\r\n      } else \"Municipality data not available\"\r\n    } else \"Not found in coverage area\"\r\n    \r\n    # Extract county name\r\n    county_name <- if (!is.null(county_result) && nrow(county_result) > 0) {\r\n      name_cols <- c(\"NAME\", \"Name\", \"COUNTY_NAME\")\r\n      available_cols <- intersect(name_cols, names(county_result))\r\n      if (length(available_cols) > 0 && !is.na(county_result[[available_cols[1]]][1])) {\r\n        paste(county_result[[available_cols[1]]][1], \"County\")\r\n      } else \"County data not available\"\r\n    } else \"Not found in New York State\"\r\n    \r\n    # Render outputs\r\n    output$matched_address <- renderText({\r\n      paste(\"📍 Geocoded Address:\", matched_address)\r\n    })\r\n    \r\n    output$township <- renderText({\r\n      paste(\"🏛️ Municipality/Township:\", township_name)\r\n    })\r\n    \r\n    output$county <- renderText({\r\n      paste(\"🗺️ County:\", county_name)\r\n    })\r\n    \r\n    # Create map\r\n    output$map <- renderLeaflet({\r\n      # Base map\r\n      map <- leaflet() %>%\r\n        addTiles() %>%\r\n        addMarkers(\r\n          lng = lon, lat = lat, \r\n          popup = paste(\"<strong>\", matched_address, \"<\/strong><br/>\",\r\n                        \"Municipality:\", township_name, \"<br/>\",\r\n                        \"County:\", county_name),\r\n          options = markerOptions(riseOnHover = TRUE)\r\n        ) %>%\r\n        setView(lng = lon, lat = lat, zoom = 14)\r\n      \r\n      # Add county boundaries (light blue)\r\n      if (!is.null(values$county_shapes)) {\r\n        map <- map %>%\r\n          addPolygons(\r\n            data = values$county_shapes,\r\n            fillColor = \"transparent\",\r\n            color = \"#0066cc\",\r\n            weight = 2,\r\n            opacity = 0.7,\r\n            group = \"Counties\",\r\n            popup = ~paste(\"County:\", NAME)\r\n          )\r\n      }\r\n      \r\n      # Add municipal boundaries (red)\r\n      if (!is.null(values$township_shapes)) {\r\n        map <- map %>%\r\n          addPolygons(\r\n            data = values$township_shapes,\r\n            fillColor = \"transparent\", \r\n            color = \"#cc3300\",\r\n            weight = 1.5,\r\n            opacity = 0.6,\r\n            group = \"Municipalities\",\r\n            popup = ~paste(\"Municipality:\", NAME, \"<br/>County:\", COUNTY)\r\n          ) %>%\r\n          addLayersControl(\r\n            overlayGroups = c(\"Counties\", \"Municipalities\"),\r\n            options = layersControlOptions(collapsed = FALSE)\r\n          )\r\n      }\r\n      \r\n      map\r\n    })\r\n    \r\n    # Success notification\r\n    showNotification(\"✓ Address successfully geocoded!\", type = \"message\", duration = 3)\r\n  })\r\n}\r\n\r\n# Run the app\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"township_finder_2.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
